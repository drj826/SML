>>>DOCUMENT

title:: Known Bugs, Desired Improvements

* Known Bugs

- ``Take Note'' indicators can't go in tables.  If you put a
  `take_note' indicator inside a table cell, it doesn't get rendered
  correctly in the PDF rendition.

- HTML: Listing titles aren't making it into the List of Listings.
  I've accidently introduced a bug that prevents listing titles from
  getting into the list of listings (at least in the HTML rendition).

- PDF: Space above lists in table cells.  In the PDF rendition, lists
  inside table cells don't start at the top of the cell, there is
  unwanted vertical space.

- PDF: Use supertabular instead of longtable.  I found out today that
  I can't use multicolumn environments inside longtables, but I can
  use them in supertabular environments.  I use multicolumn commands
  to control the background colors of individual table cells.  This
  could explain problems I run into during the pdflatex run, and also
  a bug where the first traceable ``solution'' in the generated
  problem summary for each problem is missing.

- PDF: Too much horizontal space in colored table cells.  I haven't
  figured out what's causing this yet. but each table cell with a
  background color is too wide.  Perhaps its the way I'm using the
  multicol command?  I suspect this problem is related to the fact
  that I'm not supposed to be using multicol environments inside
  longtables.  Perhaps this problem will go away when I convert all
  longtables to supertabular tables.

- PDF: Source citations should be black.  Source citations in the text
  like ``[5]'' are rendered in a green color that doesn't look good
  when the document is printed in black and white.

- Gentoo Linux: Perl Filetest operators not working right.  When I use
  the publish script from the command line on a Gentoo Linux box, the
  Perl filetest operators in the script do not work to test the
  readability of included images and files even though the files
  exists and are readable.  This problem doesn't exist when run on
  Windows.

- Gentoo Linux: Extra space after index entries.  When I use the
  publish script from the command line on a Gentoo Linux box, nearly
  all index entries have an extra space after them (but before the
  comma that separates the entry from the page number).  This problem
  doesn't exist when run on Windows.

- CSV rendering has quit working.  I tried to render CSV today and CSV
  files were created by empty.  Furthermore, no CSV file is created
  for tests.

- Test regions do not render correctly.  Test regions should be
  rendered in a way similar to problems and solutions. I fixed this
  bug and am now testing the solution.  Expect this to go away soon.

- Problem, Solution, and Test documents do not render properly by
  themselves.  Only the first line of a multi-line title is
  recognized, meta-data elements in the preamble (i.e. parent,
  problem, description) do not receive any special treatment, labels
  are not rendered at all, and tables are mis-numbered.

- Multi-line titles in included documents not handled correctly.  I
  have several included documents with multi-line titles and only the
  first line of the title is recognized as title content.  The rest is
  treated as paragraph content.

- Allow multi-line section titles.  The previous bug may be related to
  this one.  There is no reason to limit section titles to a single
  line.

- Test Table Title Trouble.  Table titles within tests are not getting
  picked up.  This may be a problem with recognizing the end of the
  preamble in test because if you DO include a table title, it gets
  pickup up as the document (or section) title instead of the table
  title.

- Error in copyright handling.  Copyright notices are not being
  handled correctly. In the HTML rendition copyright notices are
  showing up correctly outside the box and incorrectly inside the
  box. They should be showing up correctly inside the box.

- PDF: Use [cmd:\ensuremath] command.  For text that needs to be
  typeset in math mode (LaTeX) use the [cmd:\ensuremath] command
  rather than hard coding dollar signs before and after the text.
  This will eliminate the problem of nested math mode strings.  I've
  run into this problem a couple of times with mathmode symbols like
  (c) and (r).

- Underscores get escaped in included text.  Some underscores should
  not be escaped in included text.  This causes a problem when
  underscores in labels and URLs are escaped by the include mechanism.

- Bibliography entries should be left justified.  Currently,
  bibliography entries are fully justified which causes problems with
  line-breaking with an entry contains a long URL (often).

- Nested Lists are broken.  Allow nesting of ordered lists inside
  un-ordered ones, and vice versa.

- PDF: Date does not appear on the title page no matter if it is
  specified in the preamble or not (doctype: article).

- When keystroke markup is not formed correctly (i.e. only one closing
  bracket is used instead of two) the application does not throw a
  warning.

* Desired Improvements

- Definition Lists.  Add support for definition lists.  The beginning
  of a definition list will be indicated by the beginning of a
  definition item.  A definition item will start with an equals sign
  (=) in the first column.  The term being defined will be everything
  between the equal sign and another equal sign (=).  Everything
  following the second equal sign will be the definition.

- Style sheet Integration.  I'd like all style information to go into
  style sheets and for the user to select which style sheet to apply
  at publishing time.  This will enable people to build their own
  custom styles.  The program should look in the ``styles'' directory
  on start-up to determine what styles are available.

- Enable use of the script as a web service.  Sometimes I'd like to
  use the script when I'm away from home and using a computer that
  doesn't have a TeX/LaTeX distribution on it.  In these instances it
  would be nice to run the script as a web service from my web server.

- HTML: Index Capability.  It would be nice to render an index for the
  HTML rendition since the structured text rules already support it
  and it is fully implemented in the PDF rendition.

- Add all docbook supported `attention' notations.  These include
  important, tip, caution, and warning.  Each one of these should use
  a special margin icon.  These would be inserted into the text as
  their own paragraphs prefixed with ``tip:'' ``caution:'' and
  ``warning:''.

- Generate DOCBOOK XML documents.  I'd like to add a `docbook'
  rendition.  If I could render structured test documents in DOCBOOK
  XML, I could use a variety of other tools to then publish the
  document to other formats.

- Deprecate `..' meta-data declarations.  I want to further simplify
  the structured text language by totally doing away with the
  `..keyword: value' notation for setting values during processing.

- Add `script' feature.  I want the ability to launch a script from
  the publishing program, and have the output of the script placed in
  the document.  This will be similar to the `generate' feature except
  an arbitrary script can be used to generate the content rather than
  the relatively small number of pre-defined generate-able blocks of
  content.  I might write a script that performs a vulnerability
  assessment (nmap, nessus, p0f, etc) and place the output into the
  document being published.  Think about it -- the act of publishing
  the vulnerability assessment could actually perform the
  vulnerability assessment.  Cool.  Oh, one other thing.  The publish
  program will loop through pass 2 until all generate and script
  requests are satisfied.  This means the output of a script can
  request another script.  Publish will run until all scripts are
  complete.  Wow.  Think about the automation you could achieve
  combining this with Nessus.  This feature has been added and is in
  testing.  I expect to remove this one from the list very soon.

- HTML: one page per section.  Implement an HTML rendering option that
  renders each section as its own page with navigation links that take
  you to the previous and next page (section).

- RTF: Finish implementing RTF rendering.  I know in the near future
  I'm going to need the ability to render documents as RTF so I need
  to finish implementing this feature.

- HTML: Implement presentation rendering.  Most web browsers now
  support presentations.  These are like PowerPoint presentations
  except they're written in HTML.  For an example see
  [url:http://www.zopezen.org/s5/news.presentation].  I'd like to add
  a ``Presentation'' link to the navigation links at the top of the
  HTML rendition that actually does a slide show of the slides in the
  document.

- Headers and Footers.  Add the ability to specify header and footer
  information.  This should be added to the structured text language.
  In envision keywords like "head_left:", "head_center:",
  "head_right:", "foot_left:", "foot_center:", and "foot_right:".

- List of Tests.  The list of tests should look the same as the lists
  of problems and solutions.  Tests should be arranged in the same
  hierarchical way.

- Video Region.  Add a new region named 'video' that can point to a
  video clip file.

- Audio Region.  Add a new region named 'audio' that can point to a
  audio clip file.

- Generated values.  There are several count values I'd like to be
  able to insert into the document anywhere in the text:
  [gen:urgent-problem-count], [gen:urgent-solution-count], and
  probably many others if I put my thinking cap on.

- User defined margins.  I want to give users the ability to define
  margin sizes in the preamble (left, right, top, bottom, inner,
  outer).

- Use textcomp package.  Several of the symbols rendered in LaTeX
  could be better rendered using the textcomp package (copyright,
  trademark, registered trademark, and perhaps left and right arrows)
  rather than resorting to a math mode hack for these symbols.

- User defined regions.  It would be nice to give users the ability to
  define regions simply by using them.  For instance, if I wanted a
  "recipe" region to contain a recipe, I shouldn't have to build it
  into the program, I should be able to simply start a region with
  ">>>recipe" and put a recipe in it. The script should automatically
  do some things for me like make a list of recipes (or whatever I've
  called my custom region).  Each region can have certain fields:
  title, label, description, parent.

- User defined facets.  Like user defined regions, users need the
  ability to define (on-the-fly) their own facet names and values.
  For example, if the user defined a region like "case" they might add
  facets like "prosecutor" and "defender".

- HTML: Make Document Display Optional.  There should be an HTML
  option to NOT display the document after publishing (the default
  should be to display the document after publishing.  This option
  will come in handy when you're making a series of small changes to a
  document and republishing after each change and don't want a new
  browser window poping up after each publishing run.

- PDF: Custom Title Pages.  Implement a custom title page using the
  LaTeX \titlepage environment.  I've started on this and have a
  prototype title page.

- Subtitles.  Any piece of text that can have a title (i.e. document,
  section, table, listing, etc.) should also have an optional
  subtitle.

- Document Abstract.  The preamble of a document should have an
  optional abstract.  I'm not sure what to do with this abstract
  (throw it away?) when a document with an abstract is included inside
  a containing document.

- Project Planning.  Add necessary meta-data to extend the script's
  usefullness to writing project plans and making tasks traceable to
  problems, solutions, and tests.  At the least, I think project
  planning should include identification of tasks and resources.

- Content Replacement Mechanism.  Implement a general mechanism for
  pulling data elements from one part of the document into other parts
  of the document.  For instance, "[titile:tab-categories]" should be
  replaced with the title of the table labeled "tab-categories".

- File fields in source regions. Add a 'file' data element to the
  'source' environment that enables users to specify that the cited
  source is a file to be published along with the document.  This is
  only really relevant to the HTML rendition where the original file
  (perhaps a PDF file) can be pulled up by clicking on a hyperlink.

- HTML: Link to PDF rendition.  If there is a PDF rendition available
  in the output directory when the HTML version is published, add a
  link to the PDF version.

- Options Hash.  Put all options into an options hash that can be
  serialized into a file to enable users to save their preferences.
  This will take on added importance as I add richer options.

- Table column and row spanning.  Add support for table column and row
  spanning.  I think a cell that spans two columns should start like
  ":c2:" and one that spans three rows should start like ":r3".

- Numbered Listings.  Add support for numbering the lines in a listing
  environment (like for code listings).

- Superscript and Subscript.  Add inline markup for superscript and
  subscript.  Markup for superscript should be like "x[sup:2]" and
  markup for subscript should be "x[sub:2]" -- I may change my mind
  later about that syntax, but I can't think of a better, more compact
  notation at the moment.

- Arbitrary Links.  Add an arbitrary internal linking mechanism like:
  "[link:tab-example]This text will be hyperlinked.[/]" -- perhaps
  this could be used for arbitrary external links too:
  "[link:http://www.donjohnson.net/]My web site[/]".

- User defined output directory.  Give the user the ability to define
  the location of the output directory.  Currently, the output
  directory is created in the same directory containing the source
  text file.

######################################################################
# Local Emacs Variables

# Local Variables:
# mode: outline
# mode: refill
# coding: us-ascii
# fill-column: 70
# End:

######################################################################

<<<DOCUMENT
