#---------------------------------------------------------------------

title:: Today's Debugging

date:: 2013-01-13

[ ] Problem with baretable processing.  It appears the first line of
    each baretable cell gets added twice to the parts array.

[ ] Documents included in documents.  Now that a document is a region,
    I need to change the behavior of the include function to handle
    the case in which an author includes one document inside another.

[ ] Populate document's and library's references_ds.  Library and
    Document objects BOTH need to remember bibliographic references.
    A document object must have the capability to render a
    document-centric list of references and a library must have the
    capability to render a library-centric list of references.

[.] How about having _begin_block and _end_block parser methods?  The
    beginning of a block ALWAYS signifies the end of the previous
    block.  This would provide a mechanism to perform processing at
    the end of a block allowing me to get rid of some problematic
    deferred processing (like everything in the _process_elements
    method).

[X] Delay block content accumulation (make it lazy).  I originally
    wanted to make SML::Block::content a method but it must remain an
    attribute since methods like _substitute_variables CHANGE the
    content (and the changed content must persist).

What content entities must libraries and documents remember and why?

[X] glossary (library, document)

  - generate a library-centric glossary
  - generate a document-centric glossary
  - look up glossary definitions

[X] acronym_list (library, document)

  - generate a library-centric list of acronyms
  - generate a document-centric list of acronyms
  - look up acronym definitions

[ ] reference_ds (library, document)

  - generate a library-centric list of references
  - generate a document-centric list of references
  - look up reference citations

[X] index_ds (library, document)

  - generate a library-centric index of terms
  - generate a document-centric index of terms

[X] fragments (library)

  - memoize fragment objects to optimize parsing

[ ] entity_ds (library)

  - reason about entities in a library

[ ] division_ds (library)

[X] property_ds (library)

  - look up entity properties

[ ] variable_ds (library)

  - look up variable values during variable substitution

[X] note_ds (document)

  - store and retrieve note (i.e. footnote) content

[ ] outcome_ds (library)

[ ] review_ds (library)

[ ] resource_ds (library, fragment)

  - generate a fragment-centric list of resources with cryptographic
    hashes to detect changes

  - generate a library-centric list of resources with cryptographic
    hashes to detect changes

#---------------------------------------------------------------------

title:: Simplify Parsing

date:: 2013-01-06

[.] Update SML::Parser to get rid of unnecessary attributes that do
    not get assigned to the library, the fragment, a document, or an
    entity during parsing ('lookup' for instance).

[-] Update SML::Block to convert 'content' from an attribute to a
    method.  The content of a block should be generated on demand
    rather that built up line-by-line as the block is parsed.  I think
    this will conserve memory without significantly harming
    performance.

[.] Update SML::Parser to get rid of methods: '_assign_document_data', 

[X] Don't chomp lines as they are parsed.  Chomping should only occur
    by the block 'content' method.

[X] Replace SML::Document::ids attribute with the SML::Library's
    'division_ds' attribute.  In addition to the library, should each
    division object have a division_ds attribute? Perhaps document
    objects should have a division_ds attribute?

[X] Update SML::Parser so that all new division are added both to the
    library division_ds and to the current document's division_ds.

[X] Replace the SML::Document 'footnote' datastructure with the
    'note_ds' datastructure.

[X] Add an SML::Note class to represent footnotes (or end notes).

#---------------------------------------------------------------------

title:: Get Rid Of 'blocks' Arrays?

date:: 2013-01-05

The problem is that when I parse a fragment containing a document and
other content, the document erroneously includes the other content
(doc.0001.sml).

[.] Do away with all SML::Parser data gathering attributes (blocks,
    divisions, elements, etc.).  These items should be added to their
    containing divisions (or to the library) during parsing, not at
    the completion of parsing.  Doing away with these items may also
    improve performance and memory usage.

[.] Use SML::Division::add_block method and use it to add blocks to
    the document as they are discovered.

[-] Write SML::Entity::add_block method and use it to add blocks to
    the entity as they are discovered.

[.] SML::Document contains some unnecessary attributes that are
    inherited from SML::Division (i.e. blocks, divisions, and perhaps
    others).

#---------------------------------------------------------------------

title:: Fragment Parsing Issues

date:: 2013-01-02

I'm still in the process of converting the parser to parse only
fragments.  This transformation turned out to be more difficult than I
first assumed because many earlier design decisions were based on the
assumption that the only thing the parser would parse would be
documents.  Still, I think I'm almost done.  Here are the remaining
issues:

[X] Implement library 'fragments' attribute that stores all parsed
    fragments.  This will enable fragment reuse without re-parsing.

[X] Generated content function is broken.  Rendering doc.0008.sml as
    SML reveals that the 'generate::' element does not get resolved as
    designed.

    This turned out simply to be a problem with the
    SML::Library::add_document method.  If the document already
    existed, I didn't replace it.  Therefore, it never got updated
    after the first loop through the parser.

[ ] Parser methods must track current document ID (and perhaps
    complete stack of division IDs?).  The parser must be capable of
    parsing a fragment containing multiple documents.

[X] Refactor _gather_data method to be easier to read.  Move the bulk
    of the login into other methods.

Perhaps objects should NOT be assigned to the library until fragment
parsing is complete?  Instead of assigning objects to the library
using the _end_division method, write a new method that adds documents
and entities to the library after the fragment is fully parsed.

#---------------------------------------------------------------------

title:: Parser Method Optimization

date:: 2013-01-02

Do all of these methods need to process line-by-line?  Perhaps I could
boost performance by processing block-by-block instead?

 _resolve_includes      => line-by-line
 _run_scripts           => line-by-line
 _insert_content        => line-by-line
 _resolve_templates     => line-by-line

 _resolve_lookups       => block-by-block
 _substitute_variables  => block-by-block

 _generate_content      => line-by-line

 _gather_data           => line-by-line

In the parsing loop that resolves substitution features, the
_gather_data MUST be the last step because it gathers data into
objects.

#---------------------------------------------------------------------

2012-12-09

title:: Parse only files

I'm refactoring the parser so it only parses files and doesn't care
whether the file represents a document, entity, or fragment.  The
parse method will return the parsed fragment.

If the fragment contains a document, the document will be in the
library upon completion of the parse.  If the fragment contains any
entities, those entities will be in the library upon completion of the
parse.

Publishing a document will be a 3 step process:

  $library->parser->parse("frd-tvs.txt");

  my $doc = $library->get_document("frd-tvs");

  $doc->as_html;

With this change, all documents must have begin and end tags
'>>>DOCUMENT' and '<<<DOCUMENT'.

If I parse a fragment where does its parsed SML text go?  Perhaps
SML::File objects should have an 'sml_text' attribute?  Or, should a
fragment be a division and each file have a fragment attribute?  I
think the latter.

Must a fragment object know to which document it belongs?  I don't
think so.

#---------------------------------------------------------------------

2012-10-02

title: Comment and Conditional Divisions in Document Preamble

I'd like to require that every division know what section it belongs
to.  Comment and conditional divisions therefore should know to which
section they belong.  The problem is that comment and conditional
divisions may occur inside the document preamble which is not in a
section.

Should the content of the document preamble be considered part of the
default section?

POSSIBLE SOLUTION: Start the default section at the beginning of the
document preamble rather than at the start of the document
narrative. I've been assuming the default section begins AFTER the
document preamble.  Is there any harm in starting the default section
at the beginning of the document?

The answer is, "yes" (there is harm) because then the document
properties would belong to the default section division rather than
the document division.  Perhaps I could short-circuit this?

POSSIBLE SOLUTION: Disallow comment and conditional divisions in the
document preamble.

I don't like this solution because it reduces the power of the SML
data format.  I can think of many instances where I want the ability
to use comment and conditional divisions within the document preamble.

POSSIBLE SOLUTION: Don't require every division to be within a
section.  This seems like the most reasonable solution to me at this
time.  Specifically, only comment and conditional divisions may occur
outside a section and the only part of a document that is outside a
section is the document preamble.

#---------------------------------------------------------------------

2012-09-21

title:: Pros and Cons of SML::Document extending SML::Division

pro: SML::Block objects must have a division attribute.  If
SML::Document does NOT extend SML::Division, then document attributes
that are not part of a division must be handled another way.
In-elegant.

con: (SOLVABLE) SML::Division objects must be part of another
division.  But if a document is a division, to what division does it
belong?  SOLUTION: In the past I've made a document division its own
parent to solve this problem.

con: SML::Division objects must be part of a document and the document
must be passed to the division constructor. If a SML::Document is a
division, what document object should be passed to the constructor?
POSSIBLE SOLUTION: The library object?  Where should the library
object get instantiated? How do I solve this problem for the Library
division?  This is not a good solution because it simply moves the
problem to the Library class.

I need the ability to make an exception for SML::Document objects to
say they DON'T require a division.

#---------------------------------------------------------------------

2012-09-16

Use a Formatter Object?

Could I use a Formatter.pm class to format divisions?  Blocks?

  my $html = $formatter->format($division,$style);

#---------------------------------------------------------------------

>>>problem

title:: My problem

id:: my-problem

priority:: routine

status:: green

description:: This is a sample problem.  The purpose of this problem
is to show how I think the ideal SML document should look.  The
preamble is above the line of equals signs.  The narrative is below
the equals signs.  If an entity doesn't contain the line of equals
signs then it contains only preamble data and no narrative content.

======================================================================

This is the narrative portion of the problem. The narrative may
include any amount of narrative content.  Can the narrative of an
entity contain section structure?  I've debated back and forth on this
issue for a few years.  Right now I'm on the side of ~~not~~ allowing
section structure withing entities.

<<<problem

#---------------------------------------------------------------------

Can allocations exist in a hierarchy?  I'm thinking not.

>>>allocation
id::       my-allocation
problem::  my-problem
solution:: my-solution
<<<allocation

#---------------------------------------------------------------------

* FEATURE-010 improve glossary definition context indicator

Here is an idea:

  glossary: Critical Design Review [ns:IEEE] [alt:ieee] = (CDR) (1) A
  review conducted to verify that the detailed design of one or more
  configuration items satisfy specified requirements; to establish the
  compatibility among the configuration items and other items of
  equipment, facilities, software, and personnel; to assess risk areas
  for each configuration item; and, as applicable, to assess the
  results of producibility analyses, review preliminary hardware
  product specifications, evaluate preliminary test planning, and
  evaluate the adequacy of preliminary operation and support
  documents. See also Preliminary Design Review; system design
  review. (2) A review as in (1) of any hardware or software
  component. [ieee-std-610-12-1990]

Where 'ns' stands for namespace, and 'alt' stands for alternative
definition (used when there are multiple glossary definitions of the
same term).  The namespace token would be shown in parenthesis in
front of the definition in the glossary but not when the definition is
re-used in the text as in [def:ieee:Critical Design Review].
